View(final)
View(final$result)
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[2])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(final)
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[3])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(final)
hours <- final$result$opening_hours$periods
View(hours)
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[4])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
View(final)
View(final)
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[5])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[1])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[6])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[7])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[8])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
View(final)
View(final)
body
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[9a])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[9])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[10])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[11])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[12])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
resource <- list(key = my.key, placeid = ids[13])
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[13])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
View(final)
View(final)
setwd("~/Documents/Info 201/a7-data-app-Altrino")
runApp()
library(tidyr)
library(dplyr)
library(shiny)
library(ggplot2)
library(rsconnect)
# fliters the emission data and excludes NA values
emission.wide <- read.csv("data/WDI_emissions_Data.csv",
stringsAsFactors = FALSE) %>%
filter(Series.Code == "EN.ATM.CO2E.KT" |
Series.Code == "EN.ATM.CO2E.PC") %>%
na.exclude()
# mutate a ISO code for each region of the map
map <- map_data("world") %>%
mutate(Country.Code = iso.alpha(region, n = 3))
source("spatial_utils.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
library(tidyr)
library(dplyr)
library(shiny)
library(ggplot2)
library(rsconnect)
# fliters the emission data and excludes NA values
emission.wide <- read.csv("data/WDI_emissions_Data.csv",
stringsAsFactors = FALSE) %>%
filter(Series.Code == "EN.ATM.CO2E.KT" |
Series.Code == "EN.ATM.CO2E.PC") %>%
na.exclude()
# mutate a ISO code for each region of the map
map <- map_data("world") %>%
mutate(Country.Code = iso.alpha(region, n = 3))
source("spatial_utils.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp()
runApp()
library(dplyr)
library(shiny)
library(ggplot2)
library(rsconnect)
# fliters the emission data and excludes NA values
emission.wide <- read.csv("data/WDI_emissions_Data.csv",
stringsAsFactors = FALSE) %>%
filter(Series.Code == "EN.ATM.CO2E.KT" |
Series.Code == "EN.ATM.CO2E.PC") %>%
na.exclude()
# mutate a ISO code for each region of the map
map <- map_data("world") %>%
mutate(Country.Code = iso.alpha(region, n = 3))
source("spatial_utils.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
library(knitr)
runApp()
install.packages("magrittr")
library(magrittr)
install.packages("magrittr")
library(magrittr)
runApp()
setwd("~/Documents/Info 201/Group Project")
source("mykey.R")
library("httr")
library("jsonlite")
library("knitr")
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = "47.654966, -122.307910", radius = 1000)
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(final)
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = "47.654966, -122.307910", radius = 1000)
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
source("mykey.R")
library("httr")
library("jsonlite")
library("knitr")
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = "47.654966, -122.307910", radius = 1000)
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(body)
View(final)
source("index.R")
ids <- final$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[5])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
hours <- final$result$opening_hours$weekday_text
hours
View(final)
View(final)
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = "47.654966, -122.307910", name = "cafe")
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(final)
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = "47.654966, -122.307910", radius = 1000, name = "cafe")
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(final)
library(shiny)
library("shiny"")
library("shiny")
library("shiny")
?textInput
?textOutput
View(final)
source("mykey.R")
library("httr")
library("jsonlite")
library("knitr")
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = "47.654966, -122.307910", radius = 1000, name = "cafe")
body <- GET(base, query = resource)
search <- fromJSON(content(body, "text"))
View(search)
?dist
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[1])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
source("index.R")
library("shiny")
ids <- search$results$place_id
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = ids[1])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
View(final)
source('~/Documents/Info 201/Group Project/app.R')
runApp()
runApp()
setwd("~/Documents/Info 201/Group Project")
ui <- fluidPage {
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0)
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
textOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
}
ui <- fluidPage {
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0)
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
textOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
}
d
1+1
ui <- fluidPage {
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0)
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
textOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
}
library("httr")
library("jsonlite")
library("knitr")
library("shiny")
library("tidyr")
ui <- fluidPage {
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0),
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
textOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
}
ui <- fluidPage {
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0),
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
textOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
}
sever <- function(input, output) {
data <- reactive({
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = paste0(input$lat, ", ", input$long),
radius = 1000, name = name)
body <- GET(base, query = resource)
search <- fromJSON(content(body, "text"))
search
})
output$places <- renderText({
print(data()$results$name)
})
output$direction <- renderText({
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = data()$results$place_id[1])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
loc.shop <- c(final$result$geometry$location$lat, final$result$geometry$location$lng)
dist <- sqrt((input$lat-loc.shop[1])^2 + (input$long-loc.shop[2])^2)
})
}
ui <- fluidPage (
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0),
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
textOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
)
runApp()
runApp()
runApp()
install.packages("geosphere")
library("geoshpere")
library("geosphere")
?distm
runApp()
runApp()
runApp()
runApp()
runApp()
?cot
runApp()
runApp()
?atan2
runApp()
runApp()
runApp()
PI
pie
pi
runApp()
runApp()
library("httr")
library("jsonlite")
library("knitr")
library("shiny")
library("tidyr")
library("geosphere")
source("mykey.R")
shinyApp(ui, server)
sever <- function(input, output) {
data <- reactive({
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = paste0(input$lat, ", ", input$long),
radius = 1000, name = input$name)
body <- GET(base, query = resource)
search <- fromJSON(content(body, "text"))
search
})
output$places <- renderPrint({
print(data()$results$name)
})
output$direction <- renderText({
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = data()$results$place_id[1])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
loc.shop <- c(final$result$geometry$location$lat, final$result$geometry$location$lng)
dist <- distm(c(loc.shop[2], loc.shop[1]), c(input$long, input$lat), fun = distHaversine) *
0.000621
dlat <- loc.shop[1] - input$lat
dlong <- loc.shop[2] - input$long
di <- "North"
if (dlat < 0) {
if (dlong < 0) {
di <- "South"
} else {
di <- "East"
}
} else {
if (dlong < 0) {
di <- "West"
}
}
angle <- atan2(dlat, dlong) / pi * 180
paste("The distance is ", round(dist, 3), " miles, and ", round(angle, 2),
" degrees from ", di, ".")
})
}
ui <- fluidPage (
mainPanel(
numericInput("lat", label = "Enter Latitude:", value = 0),
numericInput("long", label = "Enter Longitude:", value = 0),
textInput("name", label = "Search for name:", value = ""),
p("Relevent places:"),
verbatimTextOutput("places"),
p("Here is the direction and distance:"),
textOutput("direction")
)
)
library("httr")
library("jsonlite")
library("knitr")
library("shiny")
library("tidyr")
library("geosphere")
source("mykey.R")
shinyApp(ui, server)
server <- function(input, output) {
data <- reactive({
base <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json?"
resource <- list(key = my.key, location = paste0(input$lat, ", ", input$long),
radius = 1000, name = input$name)
body <- GET(base, query = resource)
search <- fromJSON(content(body, "text"))
search
})
output$places <- renderPrint({
print(data()$results$name)
})
output$direction <- renderText({
base <- "https://maps.googleapis.com/maps/api/place/details/json?"
resource <- list(key = my.key, placeid = data()$results$place_id[1])
body <- GET(base, query = resource)
final <- fromJSON(content(body, "text"))
loc.shop <- c(final$result$geometry$location$lat, final$result$geometry$location$lng)
dist <- distm(c(loc.shop[2], loc.shop[1]), c(input$long, input$lat), fun = distHaversine) *
0.000621
dlat <- loc.shop[1] - input$lat
dlong <- loc.shop[2] - input$long
di <- "North"
if (dlat < 0) {
if (dlong < 0) {
di <- "South"
} else {
di <- "East"
}
} else {
if (dlong < 0) {
di <- "West"
}
}
angle <- atan2(dlat, dlong) / pi * 180
paste("The distance is ", round(dist, 3), " miles, and ", round(angle, 2),
" degrees from ", di, ".")
})
}
library("httr")
library("jsonlite")
library("knitr")
library("shiny")
library("tidyr")
library("geosphere")
source("mykey.R")
shinyApp(ui, server)
runApp()
setwd("~/Documents/Info 201/Info201-FinalProject")
library("httr")
library("jsonlite")
library("knitr")
library("shiny")
library("tidyr")
library("geosphere")
source("mykey.R")
shinyApp(ui, server)
runApp()
runApp()
runApp()
